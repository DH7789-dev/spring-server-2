/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Order;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-05-28T15:56:05.055Z")

@Validated
@Api(value = "payment", description = "the payment API")
@RequestMapping(value = "/v1")
public interface PaymentApi {

    @ApiOperation(value = "Returns all payment by status validate", nickname = "getAllPayment", notes = "", response = Order.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Order.class),
        @ApiResponse(code = 400, message = "error "),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/payment/order/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> getAllPayment();


    @ApiOperation(value = "Find purchase order by ID", nickname = "getOrderById", notes = "For valid response try integer IDs with value >= 1", response = Order.class, tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Order.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/payment/order/{orderId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> getOrderById(@Min(1L) @Max(10L) @ApiParam(value = "ID of payment that needs to be fetched",required=true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Place an order for a payment", nickname = "placeOrder", notes = "", response = Order.class, tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "payment successful", response = Order.class),
        @ApiResponse(code = 400, message = "Invalid Order"),
        @ApiResponse(code = 404, message = "payment not found") })
    @RequestMapping(value = "/payment/order",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Order> placeOrder(@ApiParam(value = "order placed for payment" ,required=true )  @Valid @RequestBody Order body);

}
